#!/usr/bin/python3
#
#    powerwake - a smart remote host waking utility, supporting multiple
#                waking methods, and caching known hostnames and addresses
#
#    Copyright (C) 2009 Canonical Ltd.
#
#    Authors: Dustin Kirkland <kirkland@canonical.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import re
import socket
import struct
import sys
import time
import getopt
import random

import pyipmi
import pyipmi.interfaces

class PowerWakeRequest:
    def __init__(self, mac):
        # A random nonce is used in the WoL request/reply packets to
        # disambiguate requests from individual powerwake clients.

        ident = None

        if mac == None:
            # This is a special not-really-WoL packet used when we want to talk
            # to powernapd after waking the machine up another way (i.e. IPMI).
            ident = bytes(map(ord, "Not really a WoL packet.")) * 4

        else:
            nonhex = re.compile('[^0-9a-fA-F]')
            mac = nonhex.sub('', mac)
            if len(mac) != 12:
                raise ValueError("Malformed mac address [%s]" % mac)

            ident = bytes.fromhex(mac) * 16

        self.nonce = random.randint(0, 0xFFFFFFFF)

        self.request = (bytes("PWERWAKE", "ascii") +
            self.nonce.to_bytes(length=4, byteorder='little', signed=False) +
            bytes.fromhex("FFFFFFFFFFFF") +
            ident)

    def validate_reply(self, reply):
        if (len(reply) == 12 and
            reply[0:8] == bytes("PWERWAKF", "ascii") and
            reply[8:12] == self.request[8:12]):
            return True

        else:
            return False

# sysexits.h
EX_OK          = 0
EX_USAGE       = 64
EX_NOHOST      = 68
EX_UNAVAILABLE = 69
EX_TEMPFAIL    = 75

PKG = "powerwake"
HOME = os.getenv("HOME")
short_opts = 'hb:p:wU:P:It:'
long_opts = ['help', 'broadcast=', 'ipmi', 'port=', 'wait', 'ipmi-username=', 'ipmi-password=', 'timeout=']
usage_string = """Usage: powerwake [OPTIONS] <TARGET_MAC|TARGET_IP|TARGET_HOST>

Options:

  -b, --broadcast <ip>            Sets the address to send WoL packets to
  -p, --port <port>               Sets the port to send WoL packets to
  -w, --wait                      Wait for the target system to finish booting
                                  (requires powernapd to be configured)
  -t, --timeout <seconds>         How long to wait for host to start up
                                  (only applicable to --wait, defaults to 60)
  -I, --ipmi                      Power on the system using IPMI
  -U, --ipmi-username <username>  Sets the username when using --ipmi
  -P, --ipmi-password <password>  Sets the password when using --ipmi

Examples:

Wake a machine using Wake-on-LAN:
  powerwake [-b broadcast.port] [-p broadcast.port] [-w] TARGET_MAC|TARGET_IP|TARGET_HOST

Wake a machine using IPMI:
  powerwake -I -U ipmi-username -P ipmi-password bmc.ip.or.hostname

Wake a machine using IPMI and wait for it to boot:
  powerwake -I -U ipmi-username -P ipmi-password -w -b host.ip.or.hostname bmc.ip.or.hostname"""

default_broadcast_addr = "255.255.255.255"
default_broadcast_port = 7

broadcast_addr = None
broadcast_port = None
wait_timeout = 60

def wakeonlan(mac, wait_for_ack):
    global broadcast_addr
    global broadcast_port
    global wait_timeout

    pwr = PowerWakeRequest(mac)

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.settimeout(1.0)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)

    timeout_at = time.monotonic() + wait_timeout

    while True:
        # print("Sending magic packet to: [%s]" % mac)
        sock.sendto(pwr.request, (broadcast_addr, broadcast_port))

        if not wait_for_ack:
            return

        try:
            packet, remote_addr = sock.recvfrom(1024)

            if pwr.validate_reply(packet):
                print("Received reply from {}:{} - host is up".format(remote_addr[0], remote_addr[1]))
                return

        except TimeoutError:
            pass # recv timeout

        if time.monotonic() >= timeout_at:
            print("No reply received after %d seconds" % wait_timeout, file = sys.stderr)
            sys.exit(EX_TEMPFAIL)

def ipmiwake(ipmi_host=None, ipmi_port=None, ipmi_username=None, ipmi_password=None):
    global broadcast_addr
    global broadcast_port
    global wait_timeout

    ipmi = None

    try:
        interface = pyipmi.interfaces.create_interface(interface='rmcp')
        ipmi = pyipmi.create_connection(interface)
        ipmi.session.set_session_type_rmcp(host=ipmi_host, port=ipmi_port)
        ipmi.session.set_auth_type_user(username=ipmi_username, password=ipmi_password)

        ipmi.target = pyipmi.Target(ipmb_address=0x20)

        ipmi.session.establish()

    except Exception as e:
        print("Error during IPMI connection: " + e, file=sys.stderr)
        sys.exit(EX_UNAVAILABLE)

    pwr = PowerWakeRequest(None)

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.settimeout(1.0)

    timeout_at = time.monotonic() + wait_timeout

    while True:
        chassis_status = ipmi.get_chassis_status()

        if chassis_status.power_on:
            # BMC says the machine in on - try to get a response from powernapd
            # print("Sending magic packet to: [%s]" % broadcast_addr)
            sock.sendto(pwr.request, (broadcast_addr, broadcast_port))

        else:
            # BMC says the machine is off - try to turn it on
            # print("Sending IPMI power up command")
            ipmi.chassis_control_power_up()

        if not wait_for_ack:
            return

        try:
            packet, remote_addr = sock.recvfrom(1024)

            if pwr.validate_reply(packet):
                print("Received reply from {}:{} - host is up".format(remote_addr[0], remote_addr[1]))
                return

        except TimeoutError:
            pass # recv timeout

        if time.monotonic() >= timeout_at:
            print("No reply received after %d seconds" % wait_timeout, file = sys.stderr)
            sys.exit(EX_TEMPFAIL)

def is_ip(ip):
    r1 = re.compile('^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$')
    if r1.match(ip):
        return 1
    else:
        return 0

def is_mac(mac):
    r1 = re.compile('^[0-9a-fA-F]{12}$')
    r2 = re.compile('^[0-9a-fA-F]{2}.[0-9a-fA-F]{2}.[0-9a-fA-F]{2}.[0-9a-fA-F]{2}.[0-9a-fA-F]{2}.[0-9a-fA-F]{2}$')
    if r1.match(mac) or r2.match(mac):
        return 1
    else:
        return 0

# Source the cached, known arp entries
def get_arp_cache():
    host_to_mac = {}
    for file in ["/var/cache/%s/ethers" % PKG, "/etc/ethers", "%s/.cache/ethers" % HOME]:
        if os.path.exists(file):
            f = open(file, 'r')
            for i in f.readlines():
                try:
                    (m, h) = i.split()
                    host_to_mac[h] = m
                except:
                    pass
            f.close()
    return host_to_mac

# Source the current, working arp table
def get_arp_current(host_to_mac):
    # Load hostnames
    for i in os.popen("/usr/sbin/arp"):
        m = i.split()[2]
        h = i.split()[0]
        if is_mac(m):
            host_to_mac[h] = m
    # Load ip addresses
    for i in os.popen("/usr/sbin/arp -n"):
        m = i.split()[2]
        h = i.split()[0]
        if is_mac(m):
            host_to_mac[h] = m
    return host_to_mac

def write_arp_cache(host_to_mac):
    if not os.access("%s/.cache/" % HOME, os.W_OK):
        return
    if not os.path.exists("%s/.cache/" % HOME):
        os.makedirs("%s/.cache/" % HOME)
    f = open("%s/.cache/ethers" % HOME, 'a')
    f.close()
    for file in ["/var/cache/%s/ethers" % PKG, "%s/.cache/ethers" % HOME]:
        if os.access(file, os.W_OK):
            f = open(file, 'w')
            for h in host_to_mac:
                if is_mac(host_to_mac[h]):
                    f.write("%s %s\n" % (host_to_mac[h], h))
            f.close()

def get_arp_hash():
    host_to_mac = get_arp_cache()
    host_to_mac = get_arp_current(host_to_mac)
    write_arp_cache(host_to_mac)
    return host_to_mac

# TODO:
#   Parameters to add:
#     --list - list known mac/ip-host combinations
#     --clear - clear the cache

if __name__ == '__main__':
    # set up defaults
    method = 'wol'
    wait_for_ack = False

    ipmi_host = None
    ipmi_port = None
    ipmi_username = None
    ipmi_password = None

    # parse getopt options
    try:
        opts, args = getopt.getopt(sys.argv[1:], short_opts, long_opts)
    except:
        print(usage_string, file=sys.stdout)
        sys.exit(EX_USAGE)

    for name, value in opts:
        if name in ('-b', '--broadcast'):
            try:
                broadcast_addr = socket.gethostbyname(value)
            except Exception as e:
                print(value + ": " + str(e), file=sys.stderr)
                sys.exit(EX_NOHOST)

        elif name in ('-p', '--port'):
            if value.isdigit() and int(value) <= 65535:
                broadcast_port = int(value)
            else:
                print("Value passed to " + name + " is not a valid port number [%s]" % value, file=sys.stderr)
                print(usage_string, file=sys.stderr)
                sys.exit(EX_USAGE)

        elif name in ('-t', '--timeout'):
            try:
                wait_timeout = int(value)
            except:
                print("Invalid timeout: %s" % value, file=sys.stderr)
                sys.exit(EX_USAGE)

        elif name in ('-w', '--wait'):
            default_broadcast_port = 57748
            wait_for_ack = True

        elif name in ('-I', '--ipmi'):
            method = "ipmi"

        elif name in ('-U', '--ipmi-username'):
            ipmi_username = value

        elif name in ('-P', '--ipmi-password'):
            ipmi_password = value

        elif name in ('-h', '--help'):
            print(usage_string)
            sys.exit(EX_OK)

    if broadcast_port == None:
        broadcast_port = default_broadcast_port

    if method == "ipmi":
        if broadcast_addr == None and wait_for_ack:
            print("The IP address or name of the host must be supplied with -b when using --wait with --ipmi", file=sys.stderr)
            print(usage_string, file=sys.stderr)
            sys.exit(EX_USAGE)

        if ipmi_username == None:
            print("The IPMI username must be specified with -U", file=sys.stderr)
            print(usage_string, file=sys.stderr)
            sys.exit(EX_USAGE)

        if ipmi_password == None:
            print("The IPMI password must be specified with -P", file=sys.stderr)
            print(usage_string, file=sys.stderr)
            sys.exit(EX_USAGE)

    elif method == "wol":
        if broadcast_addr == None:
            broadcast_addr = default_broadcast_addr

    # if args is less than one, we don't have a host to wake up
    if len(args) != 1:
        print(usage_string, file=sys.stderr)
        sys.exit(EX_USAGE)

    target = args[0]

    # If parameter matches a system with a static configuration, use it!
    # ^^^ Not yet implemented, default to wake-on-lan method for now
    if method == "wol":
        mac = None

        if is_mac(target):
            # this appears to be a mac address, just use it
            mac = target
        else:
            # Retrieve the mac cache
            host_to_mac = get_arp_cache()
            if target in host_to_mac:
                # mac found in the hash
                print("Trying to wake host: [%s]" % target)
                mac = host_to_mac[target]
            else:
                # not in the cache, do the expensive arp search
                host_to_mac = get_arp_hash()
                if target in host_to_mac:
                    # mac found in the hash
                    print("Trying to wake host: [%s]" % target)
                    mac = host_to_mac[target]
                else:
                    # cannot autodetect the mac address
                    print("Could not determine the MAC address of [%s]" % target, file=sys.stderr)
                    sys.exit(EX_NOHOST)

        wakeonlan(mac, wait_for_ack)

    elif method == "ipmi":
        ipmiwake(
            ipmi_host=target,
            ipmi_port=623,
            ipmi_username=ipmi_username,
            ipmi_password=ipmi_password,
        )

    sys.exit(EX_OK)
