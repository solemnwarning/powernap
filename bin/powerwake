#!/usr/bin/python3
#
#    powerwake - a smart remote host waking utility, supporting multiple
#                waking methods, and caching known hostnames and addresses
#
#    Copyright (C) 2009 Canonical Ltd.
#
#    Authors: Dustin Kirkland <kirkland@canonical.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

import ipaddress
import os
import re
import socket
import struct
import sys
import time
import getopt
import random

import pyipmi
import pyipmi.interfaces
import pyipmi.session

import powerwake.addressutils
import powerwake.targetconfig

class PowerWakeRequest:
    def __init__(self, mac):
        # A random nonce is used in the WoL request/reply packets to
        # disambiguate requests from individual powerwake clients.

        ident = None

        if mac == None:
            # This is a special not-really-WoL packet used when we want to talk
            # to powernapd after waking the machine up another way (i.e. IPMI).
            ident = bytes(map(ord, "Not really a WoL packet.")) * 4

        else:
            nonhex = re.compile('[^0-9a-fA-F]')
            mac = nonhex.sub('', mac)
            if len(mac) != 12:
                raise ValueError("Malformed mac address [%s]" % mac)

            ident = bytes.fromhex(mac) * 16

        self.nonce = random.randint(0, 0xFFFFFFFF)

        self.request = (bytes("PWERWAKE", "ascii") +
            self.nonce.to_bytes(length=4, byteorder='little', signed=False) +
            bytes.fromhex("FFFFFFFFFFFF") +
            ident)

    def validate_reply(self, reply):
        if (len(reply) == 12 and
            reply[0:8] == bytes("PWERWAKF", "ascii") and
            reply[8:12] == self.request[8:12]):
            return True

        else:
            return False

# sysexits.h
EX_OK          = 0
EX_USAGE       = 64
EX_NOHOST      = 68
EX_UNAVAILABLE = 69
EX_TEMPFAIL    = 75

short_opts = 'hb:p:wU:P:It:'
long_opts = ['help', 'broadcast=', 'ipmi', 'port=', 'wait', 'ipmi-username=', 'ipmi-password=', 'timeout=']
usage_string = """Usage: powerwake [OPTIONS] <TARGET_MAC|TARGET_IP|TARGET_HOST>

Options:

  -b, --broadcast <ip>            Sets the address to send WoL packets to
  -p, --port <port>               Sets the port to send WoL packets to
  -w, --wait                      Wait for the target system to finish booting
                                  (requires powernapd to be configured)
  -t, --timeout <seconds>         How long to wait for host to start up
                                  (only applicable to --wait, defaults to 60)
  -I, --ipmi                      Power on the system using IPMI
  -U, --ipmi-username <username>  Sets the username when using --ipmi
  -P, --ipmi-password <password>  Sets the password when using --ipmi

Examples:

Wake a machine using Wake-on-LAN:
  powerwake [-b broadcast.port] [-p broadcast.port] [-w] TARGET_MAC|TARGET_IP|TARGET_HOST

Wake a machine using IPMI:
  powerwake -I -U ipmi-username -P ipmi-password bmc.ip.or.hostname

Wake a machine using IPMI and wait for it to boot:
  powerwake -I -U ipmi-username -P ipmi-password -w -b host.ip.or.hostname bmc.ip.or.hostname"""

def wakeonlan(target_config):
    wol_mac  = target_config["wol.mac"]
    wol_ip   = target_config["wol.ip"]
    wol_port = target_config["wol.port"]

    pwr = PowerWakeRequest(wol_mac)

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.settimeout(1.0)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)

    timeout_at = time.monotonic() + target_config["wait.timeout"]

    while True:
        # print(f"Sending magic packet for {wol_mac} to {wol_ip}:{wol_port}")
        sock.sendto(pwr.request, (target_config["wol.ip"], target_config["wol.port"]))

        if not target_config["wait"]:
            return

        try:
            packet, remote_addr = sock.recvfrom(1024)

            if pwr.validate_reply(packet):
                print("Received reply from {}:{} - host is up".format(remote_addr[0], remote_addr[1]))
                return

        except TimeoutError:
            pass # recv timeout

        if time.monotonic() >= timeout_at:
            print("No reply received after %d seconds" % wait_timeout, file = sys.stderr)
            sys.exit(EX_TEMPFAIL)

def ipmiwake(target_config):
    ipmi = None

    try:
        interface = pyipmi.interfaces.create_interface(interface='rmcp')
        ipmi = pyipmi.create_connection(interface)
        ipmi.session.set_session_type_rmcp(host=target_config["ipmi.host"], port=target_config["ipmi.port"])
        ipmi.session.set_auth_type_user(username=target_config["ipmi.username"], password=target_config["ipmi.password"])

        ipmi.target = pyipmi.Target(ipmb_address=0x20)

        # pyipmi doesn't have an API to request a non-administrator privilege level, which means
        # we can't connect with less-privileged (i.e. operator) accounts... but it does have an
        # internal constant for what the privilege level resolves to which we can patch.
        pyipmi.Session.PRIV_LEVEL_ADMINISTRATOR = 3 # OPERATOR

        ipmi.session.establish()

    except Exception as e:
        print("Error during IPMI connection: " + str(e), file=sys.stderr)
        sys.exit(EX_UNAVAILABLE)

    pwr = PowerWakeRequest(None)

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.settimeout(1.0)

    timeout_at = time.monotonic() + target_config["wait.timeout"]
    next_wake_at = time.monotonic()

    while True:
        chassis_status = ipmi.get_chassis_status()

        if chassis_status.power_on:
            # BMC says the machine in on - try to get a response from powernapd

            if target_config["wait"]:
                # print("Sending magic packet to: [%s]" % broadcast_addr)
                sock.sendto(pwr.request, (target_config["wait.ip"], target_config["wait.port"]))

        else:
            # BMC says the machine is off - try to turn it on.
            # We only do this once every 10 seconds as the only server I've got to test this on
            # won't proceed to power up until you *cease* sending any further power on commands for
            # a few seconds after the first one.

            if time.monotonic() >= next_wake_at:
                ipmi.chassis_control_power_up()
                next_wake_at = time.monotonic() + 10.0

        if not target_config["wait"]:
            return

        try:
            packet, remote_addr = sock.recvfrom(1024)

            if pwr.validate_reply(packet):
                print("Received reply from {}:{} - host is up".format(remote_addr[0], remote_addr[1]))
                return

        except TimeoutError:
            pass # recv timeout

        if time.monotonic() >= timeout_at:
            print("No reply received after %d seconds" % wait_timeout, file = sys.stderr)
            sys.exit(EX_TEMPFAIL)

def find_target_config(target):
    if config := powerwake.targetconfig.target_config_from_dns(target):
        # Target configuration was found in DNS
        return config

    if os.path.exists("/etc/ethers"):
        if config := powerwake.targetconfig.target_config_from_ethers(target, "/etc/ethers"):
            # Target is a hostname or IP listed in /etc/ethers
            return config

    if mac := powerwake.addressutils.normalise_mac(target):
        # Target is a MAC address we know nothing else about

        return {
            "target": target,
            "method": "wol",
            "wait": False,
            "wol.mac": mac,
        }

    # Target configuration not found
    return None

if __name__ == '__main__':
    default_broadcast_addr = "255.255.255.255"
    default_broadcast_port = 7

    wait = False
    wait_timeout = 60

    cmdline_bcast_addr = None
    cmdline_bcast_port = None

    target_config = {}

    # parse getopt options
    try:
        opts, args = getopt.getopt(sys.argv[1:], short_opts, long_opts)
    except:
        print(usage_string, file=sys.stdout)
        sys.exit(EX_USAGE)

    for name, value in opts:
        if name in ('-b', '--broadcast'):
            try:
                cmdline_bcast_addr = socket.gethostbyname(value)

            except Exception as e:
                print(value + ": " + str(e), file=sys.stderr)
                sys.exit(EX_NOHOST)

        elif name in ('-p', '--port'):
            if value.isdigit() and int(value) <= 65535:
                cmdline_bcast_port = int(value)

            else:
                print("Value passed to " + name + " is not a valid port number [%s]" % value, file=sys.stderr)
                print(usage_string, file=sys.stderr)
                sys.exit(EX_USAGE)

        elif name in ('-t', '--timeout'):
            try:
                wait_timeout = int(value)
            except:
                print("Invalid timeout: %s" % value, file=sys.stderr)
                sys.exit(EX_USAGE)

        elif name in ('-w', '--wait'):
            default_broadcast_port = 57748
            wait = True

        elif name in ('-I', '--ipmi'):
            target_config["method"] = "ipmi"

        elif name in ('-U', '--ipmi-username'):
            target_config["ipmi.username"] = value

        elif name in ('-P', '--ipmi-password'):
            target_config["ipmi.password"] = value

        elif name in ('-h', '--help'):
            print(usage_string)
            sys.exit(EX_OK)

    # if args is less than one, we don't have a host to wake up
    if len(args) != 1:
        print(usage_string, file=sys.stderr)
        sys.exit(EX_USAGE)

    target = args[0]

    if not target_config:
        try:
            target_config = find_target_config(target)

        except powerwake.targetconfig.Error as e:
            print(str(e), file=sys.stderr)
            sys.exit(EX_NOHOST)

        if target_config == None:
            print(f"Could not determine the MAC address of {target}", file=sys.stderr)
            sys.exit(EX_NOHOST)

    target_config["wait"] = wait
    target_config["wait.timeout"] = wait_timeout

    if target_config["method"] == "ipmi":
        target_config["ipmi.host"] = target
        target_config["ipmi.port"] = 623

        target_config["wait.ip"] = cmdline_bcast_addr

        if cmdline_bcast_port != None:
            target_config["wait.port"] = cmdline_bcast_port
        elif not "wol.port" in target_config:
            target_config["wait.port"] = default_broadcast_port

        if target_config["wait"] and target_config["wait.ip"] == None:
            print("The IP address or name of the host must be supplied with -b when using --wait with --ipmi", file=sys.stderr)
            print(usage_string, file=sys.stderr)
            sys.exit(EX_USAGE)

        if not "ipmi.username" in target_config:
            print("The IPMI username must be specified with -U", file=sys.stderr)
            print(usage_string, file=sys.stderr)
            sys.exit(EX_USAGE)

        if not "ipmi.password" in target_config:
            print("The IPMI password must be specified with -P", file=sys.stderr)
            print(usage_string, file=sys.stderr)
            sys.exit(EX_USAGE)

        ipmiwake(target_config)

    elif target_config["method"] == "wol":
        if cmdline_bcast_addr != None:
            target_config["wol.ip"] = cmdline_bcast_addr
        elif not "wol.ip" in target_config:
            # If we know the IP address of the target host, then look for a broadcast address on
            # the local system which will reach it and use it, if we aren't on-link with the target
            # host, then we send it directly and hope the destination router can deal with it.
            #
            # TODO: Select most specific network if multiple match

            if "target.ip" in target_config:
                target_config["wol.ip"] = target_config["target.ip"]

                broadcast_addrs = powerwake.addressutils.get_ipv4_broadcast_addresses()
                for addr in broadcast_addrs:
                    net = ipaddress.ip_network(addr["ipaddr"] + "/" + addr["netmask"], False)
                    if ipaddress.ip_address(target_config["target.ip"]) in net:
                        target_config["wol.ip"] = addr["broadcast"]
                        break
            else:
                target_config["wol.ip"] = default_broadcast_addr

        if cmdline_bcast_port != None:
            target_config["wol.port"] = cmdline_bcast_port
        elif not "wol.port" in target_config:
            target_config["wol.port"] = default_broadcast_port

        wakeonlan(target_config)

    sys.exit(EX_OK)
